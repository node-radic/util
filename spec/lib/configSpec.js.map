{"version":3,"file":"configSpec.js","sourceRoot":"","sources":["configSpec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Config, IConfig} from \"../../lib/config\";\nvar ru = require('../../radic.util')\n\n\n\ndescribe(\"Config\", () => {\n    let defaultConfig = {\n        foo     : 'bar',\n        fooNum  : 1,\n        fooBool : true\n    }\n\n    let config: IConfig = new Config(defaultConfig)\n\n    beforeEach(() => {\n        config = new Config({ foo : 'bar' })\n    })\n\n    describe('When creating', ()=> {\n        it('should accept defaults', () => {\n            expect(config.get('foo')).toEqual('bar')\n        })\n        it('can override defaults', () => {\n            config.set('foo', 'foobar')\n            expect(config.get('foo')).toEqual('foobar')\n        })\n        it('can process values from defaults', () => {\n            config.set('barfoo', 'is:<%= foo %>')\n            expect(config.get('barfoo')).toEqual('is:bar')\n        })\n    })\n    describe('Dot notation', () => {\n        it('can deeply set values using dot notation', () => {\n            config.set('a.deeply.set.value', 'foo');\n            expect(config.get('a.deeply.set.value')).toEqual('foo')\n        })\n        it('can set deep json structures and get them using dot notation', () => {\n            config.set('a.deeply.set', { json : { structure : 'foo' }, bar : 'foobar' });\n            expect(config.get('a.deeply.set.json.structure')).toEqual('foo')\n            expect(config.get('a.deeply.set.bar')).toEqual('foobar')\n        })\n    })\n\n    describe('Object structures and advanced processing', () => {\n        let advancedStructure = {\n            foo     : 'bar',\n            level2  : {\n                boolbar  : true,\n                foonum   : 123,\n                regexbar : '',\n            },\n            process : '<%= path.to.config.level2 %>'\n        };\n        beforeEach(() => {\n            config.set('path.to.config', advancedStructure);\n        })\n        it(\"should be able to set object strutures\", function () {\n            expect(config.get('path.to.config.foo')).toEqual('bar')\n        })\n        it('should be able to get object structures', () => {\n            expect(config.get('path.to.config.level2')).toEqual(advancedStructure.level2);\n        })\n        it('should parse object structures into itself', () => {\n            let expected     = advancedStructure;\n            expected.process = <any> advancedStructure.level2;\n            expect(config.get('path.to.config')).toEqual(expected)\n        })\n    });\n\n\n\n    //\n    // describe(\"when song has been paused\", function() {\n    //     beforeEach(function() {\n    //         player.play(song)\n    //         player.pause()\n    //     })\n    //\n    //     it(\"should indicate that the song is currently paused\", function() {\n    //         expect(player.isPlaying).toBeFalsy()\n    //\n    //         // demonstrates use of 'not' with a custom matcher\n    //         expect(player).not.toBePlaying(song)\n    //     })\n    //\n    //     it(\"should be possible to resume\", function() {\n    //         player.resume()\n    //         expect(player.isPlaying).toBeTruthy()\n    //         expect(player.currentlyPlayingSong).toEqual(song)\n    //     })\n    // })\n    //\n    // // demonstrates use of spies to intercept and test method calls\n    // it(\"tells the current song if the user has made it a favorite\", function() {\n    //     spyOn(song, 'persistFavoriteStatus')\n    //\n    //     player.play(song)\n    //     player.makeFavorite()\n    //\n    //     expect(song.persistFavoriteStatus).toHaveBeenCalledWith(true)\n    // })\n    //\n    // //demonstrates use of expected exceptions\n    // describe(\"#resume\", function() {\n    //     it(\"should throw an exception if song is already playing\", function() {\n    //         player.play(song)\n    //\n    //         expect(function() {\n    //             player.resume()\n    //         }).toThrowError(\"song is already playing\")\n    //     })\n    // })\n})\n"]}