{"version":3,"file":"JSON.js","sourceRoot":"","sources":["JSON.ts"],"names":[],"mappings":"AACI,IAAI,QAAQ,GAAQ,IAAI,CAAC;AAEzB;;;;GAIG;AACH,MAAM,CAAC,IAAI,SAAS,GAAG,mBAAoB,GAAQ;IAE/C,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,UAAW,GAAG,EAAE,KAAK;QAChD,EAAE,CAAC,CAAE,KAAK,YAAY,QAAQ,IAAI,OAAO,KAAK,IAAI,UAAW,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC5B,CAAC;QACD,EAAE,CAAC,CAAE,KAAK,YAAY,MAAO,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC;QAC9B,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC,CAAC,CAAC;AACP,CAAC,CAAA;AAED;;;;;GAKG;AACH,MAAM,CAAC,IAAI,KAAK,GAAG,eAAgB,GAAW,EAAE,QAAc;IAE1D,IAAI,OAAO,GAAG,QAAQ,GAAG,8DAA8D,GAAG,KAAK,CAAC;IAEhG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,UAAW,GAAG,EAAE,KAAK;QAC5C,IAAI,MAAM,CAAC;QAGX,EAAE,CAAC,CAAE,OAAO,KAAK,IAAI,QAAS,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QACD,EAAE,CAAC,CAAE,KAAK,CAAC,MAAM,GAAG,CAAE,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAGD,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAE/B,EAAE,CAAC,CAAE,OAAO,IAAI,KAAK,CAAC,KAAK,CAAU,OAAO,CAAE,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC;QACD,EAAE,CAAC,CAAE,MAAM,KAAK,UAAW,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,KAAK,GAAG,GAAG,CAAC,CAAC;QACnC,CAAC;QACD,EAAE,CAAC,CAAE,MAAM,KAAK,UAAW,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAChC,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC,CAAC,CAAC;AACP,CAAC,CAAA;AAED;;;;;GAKG;AACH,MAAM,CAAC,IAAI,KAAK,GAAG,eAAgB,GAAQ,EAAE,QAAc;IACvD,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;AAC3C,CAAC,CAAA","sourcesContent":["\n    var old_json: any = JSON;\n\n    /**\n     * Stringify a JSON object, supports functions\n     * @param {object} obj - The json object\n     * @returns {string}\n     */\n    export var stringify = function stringify( obj: any ) {\n\n        return old_json.stringify(obj, function ( key, value ) {\n            if ( value instanceof Function || typeof value == 'function' ) {\n                return value.toString();\n            }\n            if ( value instanceof RegExp ) {\n                return '_PxEgEr_' + value;\n            }\n            return value;\n        });\n    }\n\n    /**\n     * Parse a string into json, support functions\n     * @param {string} str - The string to parse\n     * @param date2obj - I forgot, sorry\n     * @returns {object}\n     */\n    export var parse = function parse( str: string, date2obj?: any ) {\n\n        var iso8061 = date2obj ? /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/ : false;\n\n        return old_json.parse(str, function ( key, value ) {\n            var prefix;\n\n\n            if ( typeof value != 'string' ) {\n                return value;\n            }\n            if ( value.length < 8 ) {\n                return value;\n            }\n\n\n            prefix = value.substring(0, 8);\n\n            if ( iso8061 && value.match(<RegExp> iso8061) ) {\n                return new Date(value);\n            }\n            if ( prefix === 'function' ) {\n                return eval('(' + value + ')');\n            }\n            if ( prefix === '_PxEgEr_' ) {\n                return eval(value.slice(8));\n            }\n\n            return value;\n        });\n    }\n\n    /**\n     * Clone an object\n     * @param {object} obj\n     * @param {boolean} date2obj\n     * @returns {Object}\n     */\n    export var clone = function clone( obj: any, date2obj?: any ) {\n        return parse(stringify(obj), date2obj);\n    }\n"]}