{"version":3,"file":"config.js","sourceRoot":"","sources":["config.ts"],"names":[],"mappings":"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","sourcesContent":["import { objectGet, objectExists, objectSet, recurse } from './object'\n\n\nexport interface IDelimitersCollection\n{\n    [index: string]: IDelimiter;\n}\nexport interface IDelimiterLodash\n{\n    evaluate: RegExp;\n    interpolate: RegExp;\n    escape: RegExp;\n}\nexport interface IDelimiter\n{\n    opener?: string;\n    closer?: string;\n    lodash?: IDelimiterLodash;\n}\n\nexport interface IConfig\n{\n    get( prop?: any ): any;\n    set( prop: string, value: any ): IConfig;\n    merge( obj: Object ): IConfig;\n    merge( prop: string, obj: Object ): IConfig;\n    raw( prop?: any ): any;\n    process( raw: any ): any;\n    unset( prop: any ): any;\n    has( prop: any ): boolean;\n}\n\nexport interface IConfigProperty extends IConfig\n{\n    ( args?: any ): any;\n}\n\nexport class Config implements IConfig\n{\n    protected defaults: Object;\n    protected data: Object;\n    protected allDelimiters: IDelimitersCollection;\n    protected static propStringTmplRe: RegExp = /^<%=\\s*([a-z0-9_$]+(?:\\.[a-z0-9_$]+)*)\\s*%>$/i;\n\n    constructor( obj?: Object ) {\n        this.allDelimiters = {};\n        this.addDelimiters('config', '<%', '%>');\n        this.defaults = obj || {};\n        this.data     = _.cloneDeep(this.defaults);\n    }\n\n\n    public unset( prop: any ): any {\n        prop    = prop.split('.');\n        var key = prop.pop();\n        var obj = objectGet(this.data, Config.getPropString(prop.join('.')));\n        delete obj[key];\n    }\n\n    public has( prop: any ): boolean {\n        return objectExists(this.data, Config.getPropString(prop));\n    }\n\n    public raw( prop?: any ): any {\n        if ( prop ) {\n            return objectGet(this.data, Config.getPropString(prop));\n        }\n        else {\n            return this.data;\n        }\n    }\n\n    public get( prop?: any, def?: any ): any {\n        return this.process(this.raw(prop));\n    }\n\n    public set( prop: string, value: any ): IConfig {\n        objectSet(this.data, Config.getPropString(prop), value);\n        return this;\n    }\n\n    public merge( ...args: any[] ): IConfig {\n        if ( args.length === 1 ) {\n            this.data = _.merge(this.data, args[0]);\n        }\n        else {\n            var prop: string = args[0];\n            this.set(prop, _.merge(this.raw(prop), args[1]));\n        }\n        return this;\n    }\n\n\n    public process( raw: any ): any {\n        var self: Config = this;\n        return recurse(raw, function ( value ) {\n            // If the value is not a string, return it.\n            if ( typeof value !== 'string' ) {\n                return value;\n            }\n            // If possible, access the specified property via config.get, in case it\n            // doesn't refer to a string, but instead refers to an object or array.\n            var matches = value.match(Config.propStringTmplRe);\n            var result;\n            if ( matches ) {\n                result = self.get(matches[1]);\n                // If the result retrieved from the config data wasn't null or undefined,\n                // return it.\n                if ( result != null ) {\n                    return result;\n                }\n            }\n            // Process the string as a template.\n            return self.processTemplate(value, { data : self.data });\n        });\n    }\n\n    private addDelimiters( name, opener, closer ) {\n        var delimiters: IDelimiter = this.allDelimiters[name] = {};\n        // Used by grunt.\n        delimiters.opener = opener;\n        delimiters.closer = closer;\n        // Generate RegExp patterns dynamically.\n        var a             = delimiters.opener.replace(/(.)/g, '\\\\$1');\n        var b             = '([\\\\s\\\\S]+?)' + delimiters.closer.replace(/(.)/g, '\\\\$1');\n        // Used by Lo-Dash.\n        delimiters.lodash = {\n            evaluate    : new RegExp(a + b, 'g'),\n            interpolate : new RegExp(a + '=' + b, 'g'),\n            escape      : new RegExp(a + '-' + b, 'g')\n        };\n    }\n\n    private setDelimiters( name ) {\n        // Get the appropriate delimiters.\n        var delimiters: IDelimiter = this.allDelimiters[name in this.allDelimiters ? name : 'config'];\n\n        // Tell Lo-Dash which delimiters to use.\n        _[<any> 'templateSettings'] = delimiters.lodash;\n        // Return the delimiters.\n        return delimiters;\n    }\n\n    private processTemplate( tmpl: string, options: any ): string {\n        if ( !options ) {\n            options = {};\n        }\n        // Set delimiters, and get a opening match character.\n        var delimiters = this.setDelimiters(options.delimiters);\n        // Clone data, initializing to config data or empty object if omitted.\n        var data       = Object.create(options.data || this.data || {});\n\n        // Keep track of last change.\n        var last = tmpl;\n        try {\n            // As long as tmpl contains template tags, render it and get the result,\n            // otherwise just use the template string.\n            while ( tmpl.indexOf(delimiters.opener) >= 0 ) {\n                tmpl = _.template(tmpl)(data); //, delimiters.lodash);\n                // Abort if template didn't change - nothing left to process!\n                if ( tmpl === last ) {\n                    break;\n                }\n                last = tmpl;\n            }\n        }\n        catch ( e ) {\n            //console.warn('config process template fail: ' + e.message);\n        }\n\n        // Normalize linefeeds and return.\n        return tmpl.toString().replace(/\\r\\n|\\n/g, '\\n');\n    }\n\n\n    public static makeProperty( config: IConfig ): IConfigProperty {\n        var cf: any = function ( prop?: any ): any {\n            return config.get(prop);\n        };\n        cf.get      = config.get.bind(config);\n        cf.set      = config.set.bind(config);\n        cf.unset    = config.unset.bind(config);\n        cf.merge    = config.merge.bind(config);\n        cf.raw      = config.raw.bind(config);\n        cf.process  = config.process.bind(config);\n        cf.has      = config.has.bind(config);\n\n        return cf;\n    }\n\n    public static getPropString( prop: any ): string {\n        return Array.isArray(prop) ? prop.map(this.escape).join('.') : prop;\n    }\n\n    public static escape( str: string ): string {\n        return str.replace(/\\./g, '\\\\.');\n    }\n\n\n    public toString() {\n        return this.raw();\n    }\n}\n\n\nexport class PersistentConfig extends Config\n{\n    protected persistenceFilePath: string;\n\n    constructor( obj?: Object, persistenceFilePath?: string ) {\n        super(obj);\n        // this.persistenceFilePath = persistenceFilePath || process.cwd();\n        this.load();\n    }\n\n    protected save() {\n        // fs.writeJsonSync(this.persistenceFilePath, this.data, {});\n        // fs.chmodSync(this.persistenceFilePath, '0600');\n    }\n\n    protected load() {\n        // if ( false === fs.existsSync(this.persistenceFilePath) ) {\n        //     this.save();\n        // }\n        // this.data = _.merge(this.defaults, fs.readJsonSync(this.persistenceFilePath));\n    }\n\n\n    public unset( prop: any ): any {\n        super.unset(prop);\n        this.save();\n        return this;\n    }\n\n    public merge( ...args ): IConfig {\n        super.merge(args);\n        this.save();\n        return this;\n    }\n\n\n    public set( prop: string, value: any ): IConfig {\n        super.set(prop, value);\n        this.save();\n        return this;\n    }\n}\n"]}